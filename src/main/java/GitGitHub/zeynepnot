Git: Uygulamamizdaki herbir gelisim ve herbir degisim ile uygulamamiz yeni bir version kazanir. Git version kontrol sistemidir.
GitHub: Git’i kullanarak remote’da version control sistemini saglar. Yani Git versiyon control sistemini kullanan depolama servisleridir. Projelerimizi burada private(sadece bizim erisebilecegimiz) ya da public olarak burada tutabiliriz.
Versiyon Kontrol Sistemi: Sunu hayal edelim, ortaogretim doneminde donem odevlerimiz vardi. Bu odevleri bir gunde bitiremezdik. Doneme yayilacak sekilde yapardik. Bu odevi her ele aldigimizda gelistirir sonra kayit ederdik ve ertesi gun tekrar ele alarak odevimize yeni seyler ekledik ya da bazi seyleri sildik. Odevimizin ilk versiyonunu degistirmeden kayit etmek ve gelistirdigimiz odevimizi ise gelistirilmis hali ile kaydetmek isteyebilirdik. Boylelikle biz odevin onceki haline gidip o kisimdan calismalar yapmak isteyebilirdik ya da gelismis hali ile calismak isteyebilirdik. Farkli sekillerde kaydettigimiz odevimizi danismanimiza gosterdigimizde aldigimiz yorumlar neticesinde odevimize son halini verip onu son version olarak kaydetsek dahi bir gun sonra aklimiza yeni bir sey daha geldi ve eklemeler yapmak isteyebiliriz. Birden fazla kaydedilmis farkli versiyonlardaki odevimizle calisirken bunlari bir control sistemi ile yonetebilir, karisikligi engellemis oluruz.
Iste Git ile projelerimiz uzerinde calisirken birden fazla versiyonu olan projelerimizi kaydetmek, karsilastirmak ve gelistirmek mumkun olabilir. Farkli tarihlerde olusan projemizin versiyonlari arasinda gidip gelebiliz. Versiyon control sistemi ile bu isleri saglikli bir sekilde yurutebiliriz.
Versiyon Kontrol Sisteminin faydasi, bazi dosyalarin veya projenin tamaminin bir onceki versiyona dondurulmesidir. Zaman icerisnde yapilan degisikliklerin karsilastirirlmasi versiyonlar arasi gezerek mumkun olabilir.
Probleme neden olabilecek degisikliklerin en son kimin tarafindan yapildigi version control sistemi sayesinde mumkundur.
3 cesit versiyon control sistemi vardir.
1-Yerel 2-Merkezi 3-Distributed (Dagitik)
Yerel Versiyon Kontrol Sistemi:
Kendi lokalinizde versiyonlar arasi calisma imkan verir, ancak ortak calisma ile versiyonlara ulasma ve onlar uzerinde calisma imkani sunmuyor.
2-Merkezi Versiyon Kontrol Sistemi:
Merkezde sadece bir bilgisayar var. Ortak calismaya imkan saglar, ancak bir sebeple A sahsi merkezdeki bilgisayara ulasamadiginda ya da merkezdeki bilgisayarin server’I coktugunde calismaya devam etmek mumkun olmayabilir.
3-Distributed Versiyon Kontrol Sistemi:
A, B, C kisileri uzaktaki merkezi bir alana gidebildikleri, oradaki proje uzerinde calisabildikleri gibi, dilediklerinde merkezdeki projeyi, versiyonlari kendi bilgisayarinda, yerelde kullanabilecekleri sekilde alabiliyorlar. Aldiklari versiyonlara son sekillerini verip son varsiyonlari merkeze gonderebilirler. Distributed Versiyon Kontrol Sistemi hem yerel hem merkezi version control sisteminin ozelliklerine sahiptir.
Bu sistemde server cokse ya da A sahsi merkezdeki projeye ulasamayacak olsa dahi proje uzerinde calisanlar projenin kopyasi uzerinde calisma yapabilirler. Bu sistem daha guvenlidir.
Git bir versiyon control sistemi olup, git’in versiyon control sistemi distributed’dir. Lokal bilgisayarimizda version yonetimini yapabiliriz. Git ile internet olmadan calisilabilir(offline)
Git distributed version control sistemi ile calistigindan internet baglantisi problem oldugunda lokalde calismaya imkan saglar. Uygulamamizda hatalar olustugunda bu hatalari geri alma mumkundur
GitHub, yedekleme(backup), proje paylasimi(share)(public olursa), proje yayinlama ve ortak calismaya imkan saglar.
:white_check_mark:
1
:pray:
3

Pinned by Gönül Obuz
10:39
Git Kurulum ve Ilk Ayarlar
Git configuration
git config –global user.name “ “
git config –global user.email “ “
git config –global color.ui true  //terminaldeki komutlarin renklendirilmesini saglar
global yerine local parametresini kullanirsak projenin sadece yerel kullanim ayarlarini yapmis oluruz.
Bu ayarlari yaptiktan sonra yaptigim ayarlari unutmus olabilirim. Terminalde git config –list yazarsak configurasyon ayarlarimizi detayli olarak gorebiliriz.
User name’i degistirmek istersek, terminalde git config –global user.name “ “ tirnak icinde istediginiz yeni ismi eklerseniz, isminiz degisir.
Repository: Bizim bir projemizi version control sistemine tabi tutmak istedigimizde her bir projemizi ayri bir yapida tutulur. Projelerimiz farkli projeler olabilir. Diyelim ki rentalcar projesi uzerinde calisacagiz, ayrica ecommerce projesi uzerinde calisacagiz. Bu iki proje de tamamen farkli konularda oldugundan birbirleri ile baglantili olmalari gerekmez ve herbiri icin yeni bir repository olusturmaliyiz. Birbiri ile bagli olmalari ve projelerden birini baskalari ile paylasmamiz halinde diger projeyi de baskalari gorecek. Genellikle her proje icin ayri bir repository tanimlanir.
Local Repo Olusturma:
git init komutu kullanildiginda proje klasorunde .git klasoru olusturulur. Bu klasor git’in alt yapisini olusturacak klasordur.
Lokaldeyken version control sistemini nasil devreye aliriz? git init komutu bu isi yapiyor. Bu komutu kullaninca .git isimli klasor olusuyor. Ancak git init komutunu kulanirken cok dikkatli olmali. Neyi repository’e cevireceksek onun icinde olmaliyiz. Terminalde desktop’da mi yoksa desktop uzerindeki uzerinde calisacagimiz klasorde miyiz onu control etmeliyiz. Repoya cevirme islemini biz desktop icindeyken yaparsak desktop’daki tum klasorleri bir repository icine alma ihtimalimiz var. Ancak klasorun icinde isek problem olmaz. Sifirdan klasoru terminalde actigimizda zaten bizi dogrudan klasorun icinde tutuyor. Terminali kapatip, new terminal’e basinca yine ana klasorumuz icinde oldugumuzu bize gosteriyor. Ancak biz klasor icindeki bir baska dosya icine girmek isteyebiliriz. Calismamizi orada gerceklestirebiliriz. Iste o dosyaya ulasmak istersek soyle yazmaliyiz; cd ve sonrasinda bir bosluk ve dosyamizin ismini eklemeliyiz.
Diyelim ki bizim klasorumuzun adi GIT01, onun icinde new folder’a tiklayarak yeni bir dosya actik, app1 isimli. Bunu icin Terminalde cd app1 yazip enter’a basinca desktop\GIT01\app1’I gorururuz.Biz repro’yu bu app1 icinde yapmak istedik ve cd app1 yazarak app1 icine girdik. Geri gelmek icin cd ..
Yazmamiz gerekir. Bunu yapinca desktop\GIT01’I gorduk. Yani artik GIT01 icindeyiz. Tekrar app1’e gelmek icin cd app1 yazmaliyiz terminal icinde. Artik git init komutunu kullanabiliriz. Biz app1 klasoru icindeyiz. Bundan eminiz. git init yazip enter’a basinca bize bos bir Git repository’si olustugunu yazar. (initialized empty Git repository in…One Drive\Desktop\GIT01\app1\ .git) Yani app1 klasoru icinde .git isimli bir klasor olusmus oldu. Artik herseyi, versiyonlari bu gizli klasorde tutacak. Burada bir repo olusturmus olduk. git init bir kere yapilir. Ancak baska bir proje icin calisirken o yeni proje icin de bir kere git init yapilir. Tekrarlanmaz.
Projeye lokalden ya da remote’dan baslayabiliriz. Lokalede bilgisayarimizda bir proje baslatip, onu gelistirdikce onu github’a yonlendirebiliriz ya da github’da baslangicta bir repository olusturup, projemize orada baslayabiliriz.
Bireysel olarak olusturdugumuz projelerimiz icin lokalde baslayabiliriz. Ancak halihazirda baslatilmis bir proje uzerinde calismamiz halinde boyle bir proje remote’da repository olarak baslatilmis olur ve daha sonra biz bu projeyi kendi lokalimize aliriz.
Lokalde olusturdugumuz projeyi VKS’ye tabi tutmak istersek, projemizin oldugu dosya icinde isminin yazili oldugu dosya yolu olarak sayilan kismi silip yerine cmd yazip enter yapinca terminal aciliyor. Yani terminal o dosyamiz icinden acilmis olur.
Terminalde cd desktop yazinca desktop’a git demis oluruz, oraya gider ve devaminda cd GitProject01 yazarsak desktop icindeki projemize girebiliriz.
git init yazip enter yaparsak orada initializied by seklinde bir aciklama gorursek git icinde klasorumuz olusmus demektir. Bu sekilde projemizi git ile iliskilendirmis oluruz. Local repository’de calismalarimizi boyle depolamis oluruz. git init komutu ile dosyamiz icinde .git klasorunu goruruz. Boylece git ile baglanti kurduk.
Working Space: .git klasorunun bulundugu calisma alanidir. Klasorler ve dosylara uzerinden degisiklik burada yapilir. Az once yaptigimiz islemlerle .git klasorumuz olustu. Bu klasor bizim icin working space’dir.
Staging Area: Versiyon olusturulacak olan dosya veya klasorlerin gecici olarak toplandigi yerdir. Versiyon(commit) olusturulduktan sonra otomatik olarak staging area bosaltilir. Staging area bir bekleme salonu gibi dusunulebilir. Henuz bir degisiklik yapmadik ancak degisiklik yapmayi dusundugumuz bolumleri gecici olarak bu alanda tutariz.
Commit Store: git’in komutlarini kullanarak degisiklik sonrasinda olusan versiyonlari kaydederiz. Commit Store, commitlerimizin tutuldugu, depolandigi alandir.
Working space repository oluyor. Stage ve commit store .git klasorunde yer alir.
Working Space’den Staging Area’ya bir dosyadaki bir degisiklik nedeniyle gitmek icin git add ve dosya adini yazariz veya tum dosyalardaki degisiklikleri gondermek istersek sadece git add . seklinde yazariz. Boylece working Space’deki degisiklikler Staging Area’ya tasinmis oldu.
:white_check_mark:
2
:pray:
1

Pinned by Gönül Obuz
10:40
Staging Area’dan Commit Store’a giderken git commit -m”bir mesaj” yazariz. Commit demek version demektir. git init komutu bize stage area ve commit store’u olusturdu.
Text’imizde ekleme yaptiktan sonra git status yaziyoruz terminalde ve boylece son durumu gormus oluruz. Bu asamada degismis hali staging area’ya gecmis oldu.
Bir dosyamiz icin hic add komutunu kullanmadiysak untracked seklinde bir aciklama goruruz. Bir kere add komutunu kullandiysak artik bu dosya uzerinde degisiklik yapilmasi hallerinde dosyamiz modified asamasinda olur. Bir dosya uzerindeki degisiklik staging area’ya git add  , tum degisiklikleri staging area’ya git add . ile almis oluruz.
Artik bir version olusturmak istersek versiyonlari commit olarak adlandiririz. Git commit -m” “ tirnak isareti icine o degisiklige, projeye uygun bir mesaj yazilmali.
Dosyamiz uzerinde degisiklik yaptiktan sonra hem git add hem git commit komutlarini kullanmak istersek git commit -am”v2” yazariz. Bu sekilde hic beklemeden degisikligi staging area’dan commit store’a almis olduk. Ancak bu komutu kullanabilmemiz icin bir kere git add komutu kullanilmis olmali. Bu komut sonrasinda terminalde yaptigimiz ekleme ve cikarmadan bahsedilecek sekilde aciklama goruruz.
git commit --amend -m”” komutu, en son commit'i değiştirmek için kullanılır ve bu komutu kullanmadan önce bir değişiklik yaptıysanız, bu değişiklikler de son commit ile birleştirilir.
git status komutu ile genel durumu ne var ne yok diye soruyoruz.
git log ile tum degisiklikleri, versiyonlari kimin yaptigi, versiyonun olusturulma tarihleri ile birlikte detayli bilgilerini goruruz. Commit kelimesi devaminda her version icin ayri ayri kodlar var. Bunlara hashcode denir.
git log –oneline komutu mevcut versiyonlarin tum detaylari yerine mesajini ve hashcode’un ilk yedi karakterini gorebiliriz.
git show komutunu hashcode’un ilk 7 karakterini yazarak kullaniriz. Degisiklik olarak neyi eklediysek onu bir metin halinde gorebiliyoruz.
git add ile birlikte degisiklik yapilan dosya ismi yazilirsa, bu dosyayi uzantisi ile birlikte yazariz, ornegin text ise dosya adi nokta koyarak txt, word belgesi ise ismi nokta ve devaminda doc, java script ise nokta java yazilmali.
git log ve git log --online ile degisiklik detaylarini tam olarak goremeyiz. Bunun icin git show komutunu kullaniriz.
git show komutunu hashcode’un ilk 7 karakterini yazarak kullaniriz. Degisiklik olarak neyi eklediysek onu bir metin halinde gorebiliyoruz.
git log –oneline kullandigimizda bize head’I isaret etti. Bu Head nedir? En son icinde bulundugumuz, aktif olan commitimiz head olarak kabul ediliyor.
git restore ve bir bosluk devaminda dosyanin adini yaziyoruz. Once git status ile mevcut durumumuzu goruntuledik.
git1 ve git2 dosyalarimizda degisiklik yapildigi, modified edildigini ancak degisikliklerin eklenmedigi uyarisini gorduk. Daha sonra git restore dosya adi yazdik enter sonrasi bu defa git status ile mevcut duruma bird aha baktik. git1 dosyamizdaki degisikligin iptal edildigini gorduk. Ancak her iki dosyada da degisikligi iptal etmek istersek git restore . yazmaliyiz. Bu komut sonucunda git1 dosyamizi ve git2 dosyamizi control edince son degisikliklerin her iki dosyada da silindigini gorduk.